"use strict";exports.id=571,exports.ids=[571],exports.modules={8571:(a,b,c)=>{c.d(b,{X:()=>n});var d=c(8301),e=c(3006),f=c(3412);let g={abi:[{inputs:[],name:"GameAlreadyCompleted",type:"error"},{inputs:[],name:"GameNotCompleted",type:"error"},{inputs:[],name:"GameNotFound",type:"error"},{inputs:[],name:"NoGamesPlayed",type:"error"},{inputs:[],name:"UnauthorizedAccess",type:"error"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"gameId",type:"uint256"},{indexed:!0,internalType:"address",name:"player",type:"address"},{indexed:!1,internalType:"uint64",name:"startTime",type:"uint64"}],name:"GameStarted",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"gameId",type:"uint256"},{indexed:!0,internalType:"address",name:"player",type:"address"},{indexed:!1,internalType:"uint64",name:"endTime",type:"uint64"}],name:"ScoreSubmitted",type:"event"},{inputs:[],name:"aggregatesInitialized",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"allowGlobalAveragesDecryption",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"gameId",type:"uint256"}],name:"allowScoreDecryption",outputs:[],stateMutability:"view",type:"function"},{inputs:[],name:"averagesComputed",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"cachedAvgMoves",outputs:[{internalType:"euint32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[],name:"cachedAvgScore",outputs:[{internalType:"euint32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[],name:"gameIdCounter",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"gameSessions",outputs:[{internalType:"address",name:"player",type:"address"},{internalType:"euint32",name:"score",type:"bytes32"},{internalType:"euint32",name:"moves",type:"bytes32"},{internalType:"uint64",name:"startTime",type:"uint64"},{internalType:"uint64",name:"endTime",type:"uint64"},{internalType:"bool",name:"completed",type:"bool"},{internalType:"ebool",name:"reached2048",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"gameId",type:"uint256"}],name:"getGameSession",outputs:[{internalType:"address",name:"player",type:"address"},{internalType:"euint32",name:"score",type:"bytes32"},{internalType:"euint32",name:"moves",type:"bytes32"},{internalType:"uint64",name:"startTime",type:"uint64"},{internalType:"uint64",name:"endTime",type:"uint64"},{internalType:"bool",name:"completed",type:"bool"},{internalType:"ebool",name:"won",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[],name:"getGlobalAverages",outputs:[{internalType:"euint32",name:"avgScore",type:"bytes32"},{internalType:"euint32",name:"avgMoves",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"player",type:"address"}],name:"getPlayerGameCount",outputs:[{internalType:"uint32",name:"",type:"uint32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"player",type:"address"}],name:"getPlayerGameIds",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"player",type:"address"}],name:"getPlayerStats",outputs:[{internalType:"uint256[]",name:"gameIds",type:"uint256[]"},{internalType:"uint32",name:"gamesPlayed",type:"uint32"},{internalType:"euint32",name:"bestScore",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"start",type:"uint256"},{internalType:"uint256",name:"count",type:"uint256"}],name:"getPlayers",outputs:[{internalType:"address[]",name:"playerAddresses",type:"address[]"}],stateMutability:"view",type:"function"},{inputs:[],name:"getPlayersCount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"playerBestScore",outputs:[{internalType:"euint32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"playerGameCount",outputs:[{internalType:"uint32",name:"",type:"uint32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"}],name:"playerGames",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"playerHasBestScore",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"players",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"protocolId",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"pure",type:"function"},{inputs:[],name:"refreshGlobalAverages",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"startGame",outputs:[{internalType:"uint256",name:"gameId",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"gameId",type:"uint256"},{internalType:"externalEuint32",name:"encryptedScore",type:"bytes32"},{internalType:"bytes",name:"inputProofScore",type:"bytes"},{internalType:"externalEuint32",name:"encryptedMoves",type:"bytes32"},{internalType:"bytes",name:"inputProofMoves",type:"bytes"}],name:"submitScore",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"totalEncryptedMoves",outputs:[{internalType:"euint64",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[],name:"totalEncryptedScores",outputs:[{internalType:"euint64",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[],name:"totalGames",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"totalPlayers",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"}]};var h=c(3535),i=c(8917);function j(){return Math.floor(Date.now()/1e3)}class k{#a;#b;#c;#d;constructor(a,b,c,d){if(!h.PW(c))throw TypeError(`Invalid address ${c}`);let f=b.sort(),g=a.createEIP712(d??e.j,f,0,0);try{let a=i.z.hash(g.domain,{UserDecryptRequestVerification:g.types.UserDecryptRequestVerification},g.message);this.#a=f,this.#b=c,this.#d=`${c}:${a}`}catch(a){throw console.log(a),a}}get contractAddresses(){return this.#a}get userAddress(){return this.#b}get publicKey(){return this.#c}get key(){return this.#d}}class l{#c;#e;#f;#g;#h;#b;#a;#i;constructor(a){if(!l.checkIs(a))throw TypeError("Invalid FhevmDecryptionSignatureType");this.#c=a.publicKey,this.#e=a.privateKey,this.#f=a.signature,this.#g=a.startTimestamp,this.#h=a.durationDays,this.#b=a.userAddress,this.#a=a.contractAddresses,this.#i=a.eip712}get privateKey(){return this.#e}get publicKey(){return this.#c}get signature(){return this.#f}get contractAddresses(){return this.#a}get startTimestamp(){return this.#g}get durationDays(){return this.#h}get userAddress(){return this.#b}static checkIs(a){if(!a||"object"!=typeof a||!("publicKey"in a&&"string"==typeof a.publicKey)||!("privateKey"in a&&"string"==typeof a.privateKey)||!("signature"in a&&"string"==typeof a.signature)||!("startTimestamp"in a&&"number"==typeof a.startTimestamp)||!("durationDays"in a&&"number"==typeof a.durationDays)||!("contractAddresses"in a&&Array.isArray(a.contractAddresses)))return!1;for(let b=0;b<a.contractAddresses.length;++b)if("string"!=typeof a.contractAddresses[b]||!a.contractAddresses[b].startsWith("0x"))return!1;return!!("userAddress"in a&&"string"==typeof a.userAddress&&a.userAddress.startsWith("0x"))&&!!("eip712"in a&&"object"==typeof a.eip712&&null!==a.eip712)&&!!("domain"in a.eip712&&"object"==typeof a.eip712.domain)&&!!("primaryType"in a.eip712&&"string"==typeof a.eip712.primaryType)&&"message"in a.eip712&&!!("types"in a.eip712&&"object"==typeof a.eip712.types&&null!==a.eip712.types)}toJSON(){return{publicKey:this.#c,privateKey:this.#e,signature:this.#f,startTimestamp:this.#g,durationDays:this.#h,userAddress:this.#b,contractAddresses:this.#a,eip712:this.#i}}static fromJSON(a){return new l("string"==typeof a?JSON.parse(a):a)}equals(a){return a.signature===this.#f}isValid(){return j()<this.#g+24*this.#h*3600}async saveToGenericStringStorage(a,b,c){try{let d=JSON.stringify(this),e=new k(b,this.#a,this.#b,c?this.#c:void 0);await a.setItem(e.key,d),console.log(`signature saved! contracts=${this.#a.length}`)}catch{console.error("FhevmDecryptionSignature.saveToGenericStringStorage() failed!")}}static async loadFromGenericStringStorage(a,b,c,d,e){try{let f=new k(b,c,d,e),g=await a.getItem(f.key);if(!g)return console.warn(`Could not load signature! key=${f.key}`),null;try{let a=l.fromJSON(g);if(!a.isValid())return null;return a}catch{return null}}catch{return console.error("FhevmDecryptionSignature.loadFromGenericStringStorage() failed!"),null}}static async new(a,b,c,d,e){try{let f=await e.getAddress(),g=j(),h=a.createEIP712(c,b,g,365),i=await e.signTypedData(h.domain,{UserDecryptRequestVerification:h.types.UserDecryptRequestVerification},h.message);return new l({publicKey:c,privateKey:d,contractAddresses:b,startTimestamp:g,durationDays:365,signature:i,eip712:h,userAddress:f})}catch{return null}}static async loadOrSign(a,b,c,d,e){let f=await c.getAddress(),g=await l.loadFromGenericStringStorage(d,a,b,f,e?.publicKey);if(g)return g;let{publicKey:h,privateKey:i}=e??a.generateKeypair(),j=await l.new(a,b,h,i,c);return j?(await j.saveToGenericStringStorage(d,a,!!e?.publicKey),j):null}}class m{#j;constructor(a){this.#j=a}getItem(a){return this.#j.getItem(a)}setItem(a,b){this.#j.setItem(a,b)}removeItem(a){this.#j.removeItem(a)}}function n(a){let{instance:b,signer:c,chainId:e}=a,[h,i]=(0,d.useState)(!1),[j,k]=(0,d.useState)(null),[n,o]=(0,d.useState)(null),[p,q]=(0,d.useState)(),r=(0,d.useCallback)(()=>c&&p?new f.NZ(p,g.abi,c):null,[c,p]),s=(0,d.useCallback)(async()=>{let a=r();if(!a)return k("Wallet not connected or contract not deployed"),null;try{i(!0),k(null);let b=await a.startGame();await b.wait();let c=Number(await a.gameIdCounter())-1;return o(c),console.log(`Game started with ID: ${c}`),c}catch(a){return k(a instanceof Error?a.message:"Failed to start game"),console.error("Start game error:",a),null}finally{i(!1)}},[r]),t=(0,d.useCallback)(async(a,d,e)=>{let f=r();if(!b||!f||!c)return k("Not ready to submit score"),!1;try{i(!0),k(null);let g=await c.getAddress(),h=b.createEncryptedInput(p,g);h.add32(d);let j=await h.encrypt(),l=b.createEncryptedInput(p,g);l.add32(e);let m=await l.encrypt();console.log("Submitting encrypted score and moves...",{score:d,moves:e});let n=await f.submitScore(a,j.handles[0],j.inputProof,m.handles[0],m.inputProof);return await n.wait(),console.log(`Score and moves submitted successfully for game ${a}`),!0}catch(a){return k(a instanceof Error?a.message:"Failed to submit score"),console.error("Submit score error:",a),!1}finally{i(!1)}},[b,r,c,p]),u=(0,d.useCallback)(async a=>{let b=r();if(!b)return k("Contract not available"),null;try{i(!0),k(null);let c=await b.getPlayerStats(a);return{gameIds:c[0],gamesPlayed:Number(c[1]),bestScore:c[2]}}catch(a){return k(a instanceof Error?a.message:"Failed to get player stats"),console.error("Get player stats error:",a),null}finally{i(!1)}},[r]),v=(0,d.useCallback)(async()=>{let a=r();if(!a)return k("Contract not available"),null;try{let b=await a.totalGames(),c=await a.totalPlayers();return{totalGames:Number(b),totalPlayers:Number(c)}}catch(a){return k(a instanceof Error?a.message:"Failed to get total stats"),console.error("Get total stats error:",a),null}},[r]),w=(0,d.useCallback)(async a=>{if(!b||!c||!p)return k("FHEVM instance, signer, or contract not available"),null;try{i(!0),k(null);let d=new m(window.localStorage),e=await l.loadOrSign(b,[p],c,d);if(!e)return k("Unable to build FHEVM decryption signature"),null;let f=a.toString();console.log("Decrypting value...",{handle:f,contractAddress:p});let g=(await b.userDecrypt([{handle:f,contractAddress:p}],e.privateKey,e.publicKey,e.signature,e.contractAddresses,e.userAddress,e.startTimestamp,e.durationDays))[f];return console.log("Decrypted value:",g),Number(g)}catch(a){return k(a instanceof Error?a.message:"Failed to decrypt value"),console.error("Decryption error:",a),null}finally{i(!1)}},[b,c,p]),x=(0,d.useCallback)(async()=>{let a=r();if(!b||!a||!c)return k("Not ready to get global averages"),null;try{i(!0),k(null),console.log("\uD83D\uDD04 Step 1/4: Refreshing global averages...");let b=await a.refreshGlobalAverages();await b.wait(),console.log("✅ Step 2/4: Granting decryption permission...");let c=await a.allowGlobalAveragesDecryption();await c.wait(),console.log("\uD83D\uDCE6 Step 3/4: Fetching encrypted averages...");let d=await a.getGlobalAverages();console.log("Received encrypted averages:",{avgScore:d[0].toString(),avgMoves:d[1].toString()});let e=d[0],f=d[1];console.log("\uD83D\uDD13 Step 4/4: Decrypting values...");let g=await w(e),h=await w(f);if(null===g||null===h)throw Error("Failed to decrypt one or more values");return console.log("✅ Global averages ready:",{avgScore:g,avgMoves:h}),{avgScore:g,avgMoves:h}}catch(a){return k(a instanceof Error?a.message:"Failed to get global averages"),console.error("❌ Get global averages error:",a),null}finally{i(!1)}},[b,r,c,w]),y=(0,d.useCallback)(async a=>{let b=r();if(!b)return k("Contract not available"),null;try{let c=await b.getGameSession(a);return{player:c[0],score:c[1],moves:c[2],startTime:Number(c[3]),endTime:Number(c[4]),completed:c[5],won:c[6]}}catch(a){return k(a instanceof Error?a.message:"Failed to get game session"),console.error("Get game session error:",a),null}},[r]);return{startGame:s,submitScore:t,getPlayerStats:u,getTotalStats:v,getGlobalAverages:x,getGameSession:y,getPlayers:(0,d.useCallback)(async(a,b)=>{let c=r();if(!c)return k("Contract not available"),null;try{return await c.getPlayers(a,b)}catch(a){return k(a instanceof Error?a.message:"Failed to get players"),console.error("Get players error:",a),null}},[r]),getPlayersCount:(0,d.useCallback)(async()=>{let a=r();if(!a)return k("Contract not available"),0;try{let b=await a.getPlayersCount();return Number(b)}catch(a){return k(a instanceof Error?a.message:"Failed to get players count"),console.error("Get players count error:",a),0}},[r]),decryptValue:w,loading:h,error:j,currentGameId:n,contractAddress:p,isReady:!!p&&!!c&&!!b,isWalletConnected:!!c&&!!p}}}};